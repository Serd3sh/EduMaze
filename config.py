"""
Конфигурация для более удобного дебага и изменения игровых правил
"""
from renderProxy import Vector2

# перегрузка хеширования вектора для возможности использовать вектор как индекс массива
NPC_ENABLED = True               # Спавн NPC
NPC_WALKSPEED = 5                # Скорость передвижения NPC в кадрах. Двигаться каждые NPC_WALKSPEED кадров(*)
NPC_SPAWN_COUNT = 3              # количество создаваемых NPC
NPC_SAFE_ZONE = Vector2(15, 15)  # размер безопасной зоны(*)
PEACE_COOLDOWN = 100             # Длительность мирного режим в кадрах(**)
FOG_ENABLED = True               # показывать ли всю карту, или оставить туман войны
COLLISIONS = True                # разрешить игроку проходить сквозь стены
FPS = 30                         # количество кадров в секунду(**)
RENDER_DIAMETER = 11             # количество клеток в ширину и в высоту отображаемое на экране(**)
RENDER_FOG = 3                   # радиус показа карты вокруг игрока(***)
CELL_SIZE = 64                   # размер одной клетки в пикс.
MAZE_SIZE = Vector2(31, 31)      # размер создаваемого лабиринта(***)
MIN_PAPER_TABLES = 7             # минимальное количество столов с заданиями при генерации
PAPER_TABLE_CHANCE = 50          # вероятность создания стола после достижения лимита MIN_PAPER_TABLES
MAX_HP = 3                       # максимальное ХП игрока. При достижении 0 ХП игра завершается
MAX_TASKS = 10                   # необходимое количество сданных работ для успешной сдачи сессии
SCREEN_SIZE = Vector2(CELL_SIZE, CELL_SIZE) * RENDER_DIAMETER  # не менять

# (*) - зона расположена в самом левом верхнем углу лабиринта. При старте игры NPC не заспавнятся в этой зоне

# (**) - Не смотря на то, что FPS может стоять 30, за секунду пройдет меньше кадров
# Поэтому если таймер стоит условно на 60 кадров, пройти может больше 2 секунд(не более 3-4)
# Это связанно из-за технических особенностей

# (***) - Обязательно нечетная цифра(-ы) из-за связанных с свойством особенностей

DEFAULT_CELL_SIZE = Vector2(CELL_SIZE, CELL_SIZE)
IMAGES = {
    # "тип клетки": [граничное случайное число, путь к файлу, (необяз.)размер]
    # рандом работает на случайном числе, которое генерируется в пределах [0, 100)
    # при загрузке прога создает это число и ищет ближайшее наименьшее среди этой кучи

    # Пример:
    # [0, "pic1.png"]  - [0, 10). В промежутке 10 чисел = шанс 10%
    # [10, "pic2.png"] - [10, 40). Аналогично. Шанс = 40-10 = 30%
    # [40, "pic3.png"] - [40, 85). Шанс = 85-49 = 45%
    # [85, "pic4.png"] - [85, 100). Шанс = 100-85 + 1 = 15%

    # элементы размещать СТРОГО в возрастающем порядке по числам
    # в случае нескольких файлов рекомендуется нумеровать с 0
    # использование анимированных GIF не допускается из-за особенности библиотеки SDL(pygame)
    "wall": [
        [0, "assets/images/Roof.png"]
    ],
    "surface_wall": [
        [0, "assets/images/SurfaceWallBlank.png"],
        [40, "assets/images/SurfaceWallOld.png"],
        [93, "assets/images/SurfaceWallNotes.png"],
        [95, "assets/images/SurfaceWallElectricPanel.png"],
        [97, "assets/images/SurfaceWallGOST.png"],
        [99, "assets/images/SurfaceWallKapibara.png"]
    ],
    "surface_wall_door": [
        [0, "assets/images/SurfaceWallBlank.png"],
        [80, "assets/images/SurfaceWallDoorNothing.png"],
        [90, "assets/images/SurfaceWallDoor.png"]
    ],
    "road": [ [0, "assets/images/Road.png"] ],
    "exit": [ [0, "assets/images/Road.png"] ],
    "table": [ [0, "assets/images/EmptyTable.png"] ],
    "papers": [ [0, "assets/images/PapersTable.png"] ],

    "HP": [ [0, "assets/images/HP.png", DEFAULT_CELL_SIZE/2] ],
    "HP_protected": [ [0, "assets/images/HPProtected.png", DEFAULT_CELL_SIZE/2] ],
    "clip": [ [0, "assets/images/Clip.png", DEFAULT_CELL_SIZE/2] ],

    # анимированная текстура представляется как выстроенные в линию спрайты(кадры)
    # спрайты лепятся друг к другу вплотную(воображаем бумажку и ножницы, как будем резать)
    "player": {
        "frameCount": 4,  # количество кадров в файле
        "length": 10,     # задержка кадра анимации в кадрах отрисовки (15 = 0.5 сек при 30FPS, 15/30)
        "file": "assets/images/character-animated.png",  # путь к файлу с текстурой
        "frameSize": DEFAULT_CELL_SIZE,  # размер одного кадра

        # служебные поля
        "frames": [],     # массив с кадрами в памяти
        "repeats": 0,     # количество текущих повторений
        "texture": None   # будущий объект текстуры
    },
    "teacher": {
        "frameCount": 4,
        "length": 10,
        "file": "assets/images/teacher-animated.png",
        "frameSize": DEFAULT_CELL_SIZE + Vector2(0, CELL_SIZE),

        "frames": [],
        "repeats": 0,
        "texture": None
    },
    "surface_exit": {
        "frameCount": 6,
        "length": 1,
        "file": "assets/images/ExitAnimated.png",
        "frameSize": DEFAULT_CELL_SIZE,

        "frames": [],
        "repeats": 0,
        "texture": None
    }
}

QUESTIONS = {
    # Вопрос: [правильный номер ответа, ответ1, ответ2, ..., ответN]
    "Какие существуют виды связных списков?": [
        2, "Односвязный, Двусвязный, Трехсвязный",
        "Односвязный, Двусвязный, Кольцевой",
        "Односвязный, Двусвязный",
        "Правильного ответа нет"
    ],
    "Что из ниже перечисленного является структурой хранения?": [
        3, "Стек",
        "Очередь",
        "Массив",
        "Хеш массив"
    ],
    "Каков механизм заполнения очереди?": [
        1, "Первым пришел - первым вышел",
        "Первым пришел - последним вышел",
        "Зависит от реализации",
        "Правильного ответа нет"
    ],
    "Какая структура данных описывается аббревиатурой LIFO?": [
        1, "Стек",
        "Дек",
        "Очередь",
        "Массив"
    ],
    "Какая структура данных описывается аббревиатурой FIFO?": [
        4, "Дек",
        "Стек",
        "Массив",
        "Очередь"
    ],
    "Что такое дерево?": [
        1, "Структура данных",
        "Структура хранения",
        "Совокупность структур данных",
        "Совокупность структур хранения"
    ],
    "Что такое лес?": [
        1, "Множество бинарных деревьев",
        "Множество лепестков бинарного дерева",
        "Множество дочерних узлов бинарного дерева"
    ],
    "Чем является Пирамида?": [
        4, "Неполное бинарное дерево",
        "Такого определения нет",
        "Полное бинарное дерево",
        "Почти полное бинарное дерево"
    ],
    "Что из ниже перечисленного является методом обхода бинарных деревьев": [
        3, "Максимальный метод",
        "Метод Коши",
        "Центрированный метод"
    ],
    "Что такое дескриптор списка?": [
        3, "Такого определения нет",
        "Любой узел списка",
        "Указатель на любой конец списка",
        "Длинна списка"
    ],
    "Что из себя представляет указатель void?": [
        4, "Указатель на функцию",
        "Указатель на недоступный адрес в памяти",
        "Пустой указатель",
        "Универсальный указатель"
    ],
    "Что означает NULL?": [
        4, "Пустая строка",
        "Пустой файл",
        "Альтернативная запись void",
        "Альтернативная запись 0"
    ],
    "Что является продолжением структуры связанного списка?": [
        2, "Хеш массив",
        "Бинарное дерево",
        "Стек",
        "Дек"
    ],
    "О(n) описывает ... для обработки n элементов": [
        2, "n миллисекунд",
        "n операций",
        "n количество обрабатываемых элементов"
    ],
    "Объединенное в единое целое множество поименованных элементов в общем случае разных типов называется ...": [
        2, "Структурным типом",
        "Структурой",
        "Классом",
        "Графом"
    ]
}
